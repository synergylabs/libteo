// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UTILREALTIMEACCESSRESPONSE_TEO_H_
#define FLATBUFFERS_GENERATED_UTILREALTIMEACCESSRESPONSE_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct UtilRealTimeAccessResponse;
struct UtilRealTimeAccessResponseBuilder;

struct UtilRealTimeAccessResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UtilRealTimeAccessResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRANTED = 4
  };
  bool granted() const {
    return GetField<uint8_t>(VT_GRANTED, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_GRANTED) &&
           verifier.EndTable();
  }
};

struct UtilRealTimeAccessResponseBuilder {
  typedef UtilRealTimeAccessResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_granted(bool granted) {
    fbb_.AddElement<uint8_t>(UtilRealTimeAccessResponse::VT_GRANTED, static_cast<uint8_t>(granted), 0);
  }
  explicit UtilRealTimeAccessResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UtilRealTimeAccessResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UtilRealTimeAccessResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<UtilRealTimeAccessResponse> CreateUtilRealTimeAccessResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool granted = false) {
  UtilRealTimeAccessResponseBuilder builder_(_fbb);
  builder_.add_granted(granted);
  return builder_.Finish();
}

inline const teo::UtilRealTimeAccessResponse *GetUtilRealTimeAccessResponse(const void *buf) {
  return flatbuffers::GetRoot<teo::UtilRealTimeAccessResponse>(buf);
}

inline const teo::UtilRealTimeAccessResponse *GetSizePrefixedUtilRealTimeAccessResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::UtilRealTimeAccessResponse>(buf);
}

inline bool VerifyUtilRealTimeAccessResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::UtilRealTimeAccessResponse>(nullptr);
}

inline bool VerifySizePrefixedUtilRealTimeAccessResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::UtilRealTimeAccessResponse>(nullptr);
}

inline void FinishUtilRealTimeAccessResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::UtilRealTimeAccessResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUtilRealTimeAccessResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::UtilRealTimeAccessResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_UTILREALTIMEACCESSRESPONSE_TEO_H_
