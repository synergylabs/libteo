// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UTILHEARTBEAT_TEO_H_
#define FLATBUFFERS_GENERATED_UTILHEARTBEAT_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct UtilHeartbeat;
struct UtilHeartbeatBuilder;

struct UtilHeartbeat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UtilHeartbeatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_PUBKEY = 4,
    VT_PROXIMITY_NONCE = 6
  };
  const flatbuffers::Vector<uint8_t> *user_pubkey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_USER_PUBKEY);
  }
  const flatbuffers::Vector<uint8_t> *proximity_nonce() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PROXIMITY_NONCE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_PUBKEY) &&
           verifier.VerifyVector(user_pubkey()) &&
           VerifyOffset(verifier, VT_PROXIMITY_NONCE) &&
           verifier.VerifyVector(proximity_nonce()) &&
           verifier.EndTable();
  }
};

struct UtilHeartbeatBuilder {
  typedef UtilHeartbeat Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_pubkey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> user_pubkey) {
    fbb_.AddOffset(UtilHeartbeat::VT_USER_PUBKEY, user_pubkey);
  }
  void add_proximity_nonce(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> proximity_nonce) {
    fbb_.AddOffset(UtilHeartbeat::VT_PROXIMITY_NONCE, proximity_nonce);
  }
  explicit UtilHeartbeatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UtilHeartbeat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UtilHeartbeat>(end);
    return o;
  }
};

inline flatbuffers::Offset<UtilHeartbeat> CreateUtilHeartbeat(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> user_pubkey = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> proximity_nonce = 0) {
  UtilHeartbeatBuilder builder_(_fbb);
  builder_.add_proximity_nonce(proximity_nonce);
  builder_.add_user_pubkey(user_pubkey);
  return builder_.Finish();
}

inline flatbuffers::Offset<UtilHeartbeat> CreateUtilHeartbeatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *user_pubkey = nullptr,
    const std::vector<uint8_t> *proximity_nonce = nullptr) {
  auto user_pubkey__ = user_pubkey ? _fbb.CreateVector<uint8_t>(*user_pubkey) : 0;
  auto proximity_nonce__ = proximity_nonce ? _fbb.CreateVector<uint8_t>(*proximity_nonce) : 0;
  return teo::CreateUtilHeartbeat(
      _fbb,
      user_pubkey__,
      proximity_nonce__);
}

inline const teo::UtilHeartbeat *GetUtilHeartbeat(const void *buf) {
  return flatbuffers::GetRoot<teo::UtilHeartbeat>(buf);
}

inline const teo::UtilHeartbeat *GetSizePrefixedUtilHeartbeat(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::UtilHeartbeat>(buf);
}

inline bool VerifyUtilHeartbeatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::UtilHeartbeat>(nullptr);
}

inline bool VerifySizePrefixedUtilHeartbeatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::UtilHeartbeat>(nullptr);
}

inline void FinishUtilHeartbeatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::UtilHeartbeat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUtilHeartbeatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::UtilHeartbeat> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_UTILHEARTBEAT_TEO_H_
