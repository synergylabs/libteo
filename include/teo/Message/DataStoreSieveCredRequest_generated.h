// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATASTORESIEVECREDREQUEST_TEO_H_
#define FLATBUFFERS_GENERATED_DATASTORESIEVECREDREQUEST_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct DataStoreSieveCredRequest;
struct DataStoreSieveCredRequestBuilder;

struct DataStoreSieveCredRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataStoreSieveCredRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEVICE_PUBKEY = 4,
    VT_SESSION_NONCE = 6,
    VT_CIPHERTEXT = 8
  };
  const flatbuffers::Vector<uint8_t> *device_pubkey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DEVICE_PUBKEY);
  }
  const flatbuffers::Vector<uint8_t> *session_nonce() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SESSION_NONCE);
  }
  const flatbuffers::Vector<uint8_t> *ciphertext() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CIPHERTEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DEVICE_PUBKEY) &&
           verifier.VerifyVector(device_pubkey()) &&
           VerifyOffset(verifier, VT_SESSION_NONCE) &&
           verifier.VerifyVector(session_nonce()) &&
           VerifyOffset(verifier, VT_CIPHERTEXT) &&
           verifier.VerifyVector(ciphertext()) &&
           verifier.EndTable();
  }
};

struct DataStoreSieveCredRequestBuilder {
  typedef DataStoreSieveCredRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_device_pubkey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> device_pubkey) {
    fbb_.AddOffset(DataStoreSieveCredRequest::VT_DEVICE_PUBKEY, device_pubkey);
  }
  void add_session_nonce(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> session_nonce) {
    fbb_.AddOffset(DataStoreSieveCredRequest::VT_SESSION_NONCE, session_nonce);
  }
  void add_ciphertext(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext) {
    fbb_.AddOffset(DataStoreSieveCredRequest::VT_CIPHERTEXT, ciphertext);
  }
  explicit DataStoreSieveCredRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DataStoreSieveCredRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataStoreSieveCredRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DataStoreSieveCredRequest> CreateDataStoreSieveCredRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> device_pubkey = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> session_nonce = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext = 0) {
  DataStoreSieveCredRequestBuilder builder_(_fbb);
  builder_.add_ciphertext(ciphertext);
  builder_.add_session_nonce(session_nonce);
  builder_.add_device_pubkey(device_pubkey);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataStoreSieveCredRequest> CreateDataStoreSieveCredRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *device_pubkey = nullptr,
    const std::vector<uint8_t> *session_nonce = nullptr,
    const std::vector<uint8_t> *ciphertext = nullptr) {
  auto device_pubkey__ = device_pubkey ? _fbb.CreateVector<uint8_t>(*device_pubkey) : 0;
  auto session_nonce__ = session_nonce ? _fbb.CreateVector<uint8_t>(*session_nonce) : 0;
  auto ciphertext__ = ciphertext ? _fbb.CreateVector<uint8_t>(*ciphertext) : 0;
  return teo::CreateDataStoreSieveCredRequest(
      _fbb,
      device_pubkey__,
      session_nonce__,
      ciphertext__);
}

inline const teo::DataStoreSieveCredRequest *GetDataStoreSieveCredRequest(const void *buf) {
  return flatbuffers::GetRoot<teo::DataStoreSieveCredRequest>(buf);
}

inline const teo::DataStoreSieveCredRequest *GetSizePrefixedDataStoreSieveCredRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::DataStoreSieveCredRequest>(buf);
}

inline bool VerifyDataStoreSieveCredRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::DataStoreSieveCredRequest>(nullptr);
}

inline bool VerifySizePrefixedDataStoreSieveCredRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::DataStoreSieveCredRequest>(nullptr);
}

inline void FinishDataStoreSieveCredRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataStoreSieveCredRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataStoreSieveCredRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataStoreSieveCredRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_DATASTORESIEVECREDREQUEST_TEO_H_
