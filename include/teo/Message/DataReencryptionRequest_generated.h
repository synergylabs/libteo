// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATAREENCRYPTIONREQUEST_TEO_H_
#define FLATBUFFERS_GENERATED_DATAREENCRYPTIONREQUEST_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct DataReencryptionRequest;
struct DataReencryptionRequestBuilder;

struct DataReencryptionRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataReencryptionRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIEVE_DATA_BLOCK_UUID = 4,
    VT_OWNER_PUBKEY = 6,
    VT_MSG_NONCE = 8,
    VT_CIPHERTEXT = 10
  };
  const flatbuffers::String *sieve_data_block_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_SIEVE_DATA_BLOCK_UUID);
  }
  const flatbuffers::Vector<uint8_t> *owner_pubkey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_OWNER_PUBKEY);
  }
  const flatbuffers::Vector<uint8_t> *msg_nonce() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MSG_NONCE);
  }
  const flatbuffers::Vector<uint8_t> *ciphertext() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CIPHERTEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SIEVE_DATA_BLOCK_UUID) &&
           verifier.VerifyString(sieve_data_block_uuid()) &&
           VerifyOffset(verifier, VT_OWNER_PUBKEY) &&
           verifier.VerifyVector(owner_pubkey()) &&
           VerifyOffset(verifier, VT_MSG_NONCE) &&
           verifier.VerifyVector(msg_nonce()) &&
           VerifyOffset(verifier, VT_CIPHERTEXT) &&
           verifier.VerifyVector(ciphertext()) &&
           verifier.EndTable();
  }
};

struct DataReencryptionRequestBuilder {
  typedef DataReencryptionRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sieve_data_block_uuid(flatbuffers::Offset<flatbuffers::String> sieve_data_block_uuid) {
    fbb_.AddOffset(DataReencryptionRequest::VT_SIEVE_DATA_BLOCK_UUID, sieve_data_block_uuid);
  }
  void add_owner_pubkey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> owner_pubkey) {
    fbb_.AddOffset(DataReencryptionRequest::VT_OWNER_PUBKEY, owner_pubkey);
  }
  void add_msg_nonce(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> msg_nonce) {
    fbb_.AddOffset(DataReencryptionRequest::VT_MSG_NONCE, msg_nonce);
  }
  void add_ciphertext(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext) {
    fbb_.AddOffset(DataReencryptionRequest::VT_CIPHERTEXT, ciphertext);
  }
  explicit DataReencryptionRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DataReencryptionRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataReencryptionRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DataReencryptionRequest> CreateDataReencryptionRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> sieve_data_block_uuid = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> owner_pubkey = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> msg_nonce = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext = 0) {
  DataReencryptionRequestBuilder builder_(_fbb);
  builder_.add_ciphertext(ciphertext);
  builder_.add_msg_nonce(msg_nonce);
  builder_.add_owner_pubkey(owner_pubkey);
  builder_.add_sieve_data_block_uuid(sieve_data_block_uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataReencryptionRequest> CreateDataReencryptionRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *sieve_data_block_uuid = nullptr,
    const std::vector<uint8_t> *owner_pubkey = nullptr,
    const std::vector<uint8_t> *msg_nonce = nullptr,
    const std::vector<uint8_t> *ciphertext = nullptr) {
  auto sieve_data_block_uuid__ = sieve_data_block_uuid ? _fbb.CreateString(sieve_data_block_uuid) : 0;
  auto owner_pubkey__ = owner_pubkey ? _fbb.CreateVector<uint8_t>(*owner_pubkey) : 0;
  auto msg_nonce__ = msg_nonce ? _fbb.CreateVector<uint8_t>(*msg_nonce) : 0;
  auto ciphertext__ = ciphertext ? _fbb.CreateVector<uint8_t>(*ciphertext) : 0;
  return teo::CreateDataReencryptionRequest(
      _fbb,
      sieve_data_block_uuid__,
      owner_pubkey__,
      msg_nonce__,
      ciphertext__);
}

inline const teo::DataReencryptionRequest *GetDataReencryptionRequest(const void *buf) {
  return flatbuffers::GetRoot<teo::DataReencryptionRequest>(buf);
}

inline const teo::DataReencryptionRequest *GetSizePrefixedDataReencryptionRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::DataReencryptionRequest>(buf);
}

inline bool VerifyDataReencryptionRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::DataReencryptionRequest>(nullptr);
}

inline bool VerifySizePrefixedDataReencryptionRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::DataReencryptionRequest>(nullptr);
}

inline void FinishDataReencryptionRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataReencryptionRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataReencryptionRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataReencryptionRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_DATAREENCRYPTIONREQUEST_TEO_H_
