// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UTILREGISTERIP_TEO_H_
#define FLATBUFFERS_GENERATED_UTILREGISTERIP_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct UtilRegisterIp;
struct UtilRegisterIpBuilder;

struct UtilRegisterIp FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UtilRegisterIpBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PUBKEY = 4,
    VT_IP = 6,
    VT_PORT = 8
  };
  const flatbuffers::Vector<uint8_t> *pubkey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PUBKEY);
  }
  const flatbuffers::String *ip() const {
    return GetPointer<const flatbuffers::String *>(VT_IP);
  }
  int16_t port() const {
    return GetField<int16_t>(VT_PORT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PUBKEY) &&
           verifier.VerifyVector(pubkey()) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyField<int16_t>(verifier, VT_PORT) &&
           verifier.EndTable();
  }
};

struct UtilRegisterIpBuilder {
  typedef UtilRegisterIp Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pubkey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> pubkey) {
    fbb_.AddOffset(UtilRegisterIp::VT_PUBKEY, pubkey);
  }
  void add_ip(flatbuffers::Offset<flatbuffers::String> ip) {
    fbb_.AddOffset(UtilRegisterIp::VT_IP, ip);
  }
  void add_port(int16_t port) {
    fbb_.AddElement<int16_t>(UtilRegisterIp::VT_PORT, port, 0);
  }
  explicit UtilRegisterIpBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UtilRegisterIp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UtilRegisterIp>(end);
    return o;
  }
};

inline flatbuffers::Offset<UtilRegisterIp> CreateUtilRegisterIp(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> pubkey = 0,
    flatbuffers::Offset<flatbuffers::String> ip = 0,
    int16_t port = 0) {
  UtilRegisterIpBuilder builder_(_fbb);
  builder_.add_ip(ip);
  builder_.add_pubkey(pubkey);
  builder_.add_port(port);
  return builder_.Finish();
}

inline flatbuffers::Offset<UtilRegisterIp> CreateUtilRegisterIpDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *pubkey = nullptr,
    const char *ip = nullptr,
    int16_t port = 0) {
  auto pubkey__ = pubkey ? _fbb.CreateVector<uint8_t>(*pubkey) : 0;
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  return teo::CreateUtilRegisterIp(
      _fbb,
      pubkey__,
      ip__,
      port);
}

inline const teo::UtilRegisterIp *GetUtilRegisterIp(const void *buf) {
  return flatbuffers::GetRoot<teo::UtilRegisterIp>(buf);
}

inline const teo::UtilRegisterIp *GetSizePrefixedUtilRegisterIp(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::UtilRegisterIp>(buf);
}

inline bool VerifyUtilRegisterIpBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::UtilRegisterIp>(nullptr);
}

inline bool VerifySizePrefixedUtilRegisterIpBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::UtilRegisterIp>(nullptr);
}

inline void FinishUtilRegisterIpBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::UtilRegisterIp> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUtilRegisterIpBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::UtilRegisterIp> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_UTILREGISTERIP_TEO_H_
