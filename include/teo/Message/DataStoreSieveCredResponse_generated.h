// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATASTORESIEVECREDRESPONSE_TEO_H_
#define FLATBUFFERS_GENERATED_DATASTORESIEVECREDRESPONSE_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct DataStoreSieveCredResponse;
struct DataStoreSieveCredResponseBuilder;

struct DataStoreSieveCredResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataStoreSieveCredResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_HEADER = 4,
    VT_CIPHERTEXT = 6
  };
  const flatbuffers::Vector<uint8_t> *session_header() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SESSION_HEADER);
  }
  const flatbuffers::Vector<uint8_t> *ciphertext() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CIPHERTEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SESSION_HEADER) &&
           verifier.VerifyVector(session_header()) &&
           VerifyOffset(verifier, VT_CIPHERTEXT) &&
           verifier.VerifyVector(ciphertext()) &&
           verifier.EndTable();
  }
};

struct DataStoreSieveCredResponseBuilder {
  typedef DataStoreSieveCredResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session_header(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> session_header) {
    fbb_.AddOffset(DataStoreSieveCredResponse::VT_SESSION_HEADER, session_header);
  }
  void add_ciphertext(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext) {
    fbb_.AddOffset(DataStoreSieveCredResponse::VT_CIPHERTEXT, ciphertext);
  }
  explicit DataStoreSieveCredResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DataStoreSieveCredResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataStoreSieveCredResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<DataStoreSieveCredResponse> CreateDataStoreSieveCredResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> session_header = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext = 0) {
  DataStoreSieveCredResponseBuilder builder_(_fbb);
  builder_.add_ciphertext(ciphertext);
  builder_.add_session_header(session_header);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataStoreSieveCredResponse> CreateDataStoreSieveCredResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *session_header = nullptr,
    const std::vector<uint8_t> *ciphertext = nullptr) {
  auto session_header__ = session_header ? _fbb.CreateVector<uint8_t>(*session_header) : 0;
  auto ciphertext__ = ciphertext ? _fbb.CreateVector<uint8_t>(*ciphertext) : 0;
  return teo::CreateDataStoreSieveCredResponse(
      _fbb,
      session_header__,
      ciphertext__);
}

inline const teo::DataStoreSieveCredResponse *GetDataStoreSieveCredResponse(const void *buf) {
  return flatbuffers::GetRoot<teo::DataStoreSieveCredResponse>(buf);
}

inline const teo::DataStoreSieveCredResponse *GetSizePrefixedDataStoreSieveCredResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::DataStoreSieveCredResponse>(buf);
}

inline bool VerifyDataStoreSieveCredResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::DataStoreSieveCredResponse>(nullptr);
}

inline bool VerifySizePrefixedDataStoreSieveCredResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::DataStoreSieveCredResponse>(nullptr);
}

inline void FinishDataStoreSieveCredResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataStoreSieveCredResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataStoreSieveCredResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataStoreSieveCredResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_DATASTORESIEVECREDRESPONSE_TEO_H_
