// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATASTOREDOWNLOADREQUEST_TEO_DATASTOREDOWNLOAD_H_
#define FLATBUFFERS_GENERATED_DATASTOREDOWNLOADREQUEST_TEO_DATASTOREDOWNLOAD_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {
namespace DataStoreDownload {

struct DataStoreDownloadRequest;
struct DataStoreDownloadRequestBuilder;

struct DataStoreDownloadRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataStoreDownloadRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           verifier.EndTable();
  }
};

struct DataStoreDownloadRequestBuilder {
  typedef DataStoreDownloadRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(DataStoreDownloadRequest::VT_UUID, uuid);
  }
  explicit DataStoreDownloadRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DataStoreDownloadRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataStoreDownloadRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DataStoreDownloadRequest> CreateDataStoreDownloadRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0) {
  DataStoreDownloadRequestBuilder builder_(_fbb);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataStoreDownloadRequest> CreateDataStoreDownloadRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  return teo::DataStoreDownload::CreateDataStoreDownloadRequest(
      _fbb,
      uuid__);
}

inline const teo::DataStoreDownload::DataStoreDownloadRequest *GetDataStoreDownloadRequest(const void *buf) {
  return flatbuffers::GetRoot<teo::DataStoreDownload::DataStoreDownloadRequest>(buf);
}

inline const teo::DataStoreDownload::DataStoreDownloadRequest *GetSizePrefixedDataStoreDownloadRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::DataStoreDownload::DataStoreDownloadRequest>(buf);
}

inline bool VerifyDataStoreDownloadRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::DataStoreDownload::DataStoreDownloadRequest>(nullptr);
}

inline bool VerifySizePrefixedDataStoreDownloadRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::DataStoreDownload::DataStoreDownloadRequest>(nullptr);
}

inline void FinishDataStoreDownloadRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataStoreDownload::DataStoreDownloadRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataStoreDownloadRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataStoreDownload::DataStoreDownloadRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DataStoreDownload
}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_DATASTOREDOWNLOADREQUEST_TEO_DATASTOREDOWNLOAD_H_
