// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATASTOREDOWNLOADRESPONSE2_TEO_DATASTOREDOWNLOAD_H_
#define FLATBUFFERS_GENERATED_DATASTOREDOWNLOADRESPONSE2_TEO_DATASTOREDOWNLOAD_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {
namespace DataStoreDownload {

struct DataStoreDownloadResponse2;
struct DataStoreDownloadResponse2Builder;

struct DataStoreDownloadResponse2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataStoreDownloadResponse2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT = 4
  };
  const flatbuffers::Vector<uint8_t> *content() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyVector(content()) &&
           verifier.EndTable();
  }
};

struct DataStoreDownloadResponse2Builder {
  typedef DataStoreDownloadResponse2 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> content) {
    fbb_.AddOffset(DataStoreDownloadResponse2::VT_CONTENT, content);
  }
  explicit DataStoreDownloadResponse2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DataStoreDownloadResponse2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataStoreDownloadResponse2>(end);
    return o;
  }
};

inline flatbuffers::Offset<DataStoreDownloadResponse2> CreateDataStoreDownloadResponse2(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> content = 0) {
  DataStoreDownloadResponse2Builder builder_(_fbb);
  builder_.add_content(content);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataStoreDownloadResponse2> CreateDataStoreDownloadResponse2Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *content = nullptr) {
  auto content__ = content ? _fbb.CreateVector<uint8_t>(*content) : 0;
  return teo::DataStoreDownload::CreateDataStoreDownloadResponse2(
      _fbb,
      content__);
}

inline const teo::DataStoreDownload::DataStoreDownloadResponse2 *GetDataStoreDownloadResponse2(const void *buf) {
  return flatbuffers::GetRoot<teo::DataStoreDownload::DataStoreDownloadResponse2>(buf);
}

inline const teo::DataStoreDownload::DataStoreDownloadResponse2 *GetSizePrefixedDataStoreDownloadResponse2(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::DataStoreDownload::DataStoreDownloadResponse2>(buf);
}

inline bool VerifyDataStoreDownloadResponse2Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::DataStoreDownload::DataStoreDownloadResponse2>(nullptr);
}

inline bool VerifySizePrefixedDataStoreDownloadResponse2Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::DataStoreDownload::DataStoreDownloadResponse2>(nullptr);
}

inline void FinishDataStoreDownloadResponse2Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataStoreDownload::DataStoreDownloadResponse2> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataStoreDownloadResponse2Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataStoreDownload::DataStoreDownloadResponse2> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DataStoreDownload
}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_DATASTOREDOWNLOADRESPONSE2_TEO_DATASTOREDOWNLOAD_H_
