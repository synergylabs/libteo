// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATAACCESSFETCH_TEO_H_
#define FLATBUFFERS_GENERATED_DATAACCESSFETCH_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct DataAccessFetch;
struct DataAccessFetchBuilder;

struct DataAccessFetch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataAccessFetchBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCESSOR_PUBKEY = 4,
    VT_MESSAGE_NONCE = 6,
    VT_CIPHERTEXT = 8
  };
  const flatbuffers::Vector<uint8_t> *accessor_pubkey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ACCESSOR_PUBKEY);
  }
  const flatbuffers::Vector<uint8_t> *message_nonce() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MESSAGE_NONCE);
  }
  const flatbuffers::Vector<uint8_t> *ciphertext() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CIPHERTEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCESSOR_PUBKEY) &&
           verifier.VerifyVector(accessor_pubkey()) &&
           VerifyOffset(verifier, VT_MESSAGE_NONCE) &&
           verifier.VerifyVector(message_nonce()) &&
           VerifyOffset(verifier, VT_CIPHERTEXT) &&
           verifier.VerifyVector(ciphertext()) &&
           verifier.EndTable();
  }
};

struct DataAccessFetchBuilder {
  typedef DataAccessFetch Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_accessor_pubkey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> accessor_pubkey) {
    fbb_.AddOffset(DataAccessFetch::VT_ACCESSOR_PUBKEY, accessor_pubkey);
  }
  void add_message_nonce(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message_nonce) {
    fbb_.AddOffset(DataAccessFetch::VT_MESSAGE_NONCE, message_nonce);
  }
  void add_ciphertext(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext) {
    fbb_.AddOffset(DataAccessFetch::VT_CIPHERTEXT, ciphertext);
  }
  explicit DataAccessFetchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DataAccessFetch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataAccessFetch>(end);
    return o;
  }
};

inline flatbuffers::Offset<DataAccessFetch> CreateDataAccessFetch(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> accessor_pubkey = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message_nonce = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext = 0) {
  DataAccessFetchBuilder builder_(_fbb);
  builder_.add_ciphertext(ciphertext);
  builder_.add_message_nonce(message_nonce);
  builder_.add_accessor_pubkey(accessor_pubkey);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataAccessFetch> CreateDataAccessFetchDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *accessor_pubkey = nullptr,
    const std::vector<uint8_t> *message_nonce = nullptr,
    const std::vector<uint8_t> *ciphertext = nullptr) {
  auto accessor_pubkey__ = accessor_pubkey ? _fbb.CreateVector<uint8_t>(*accessor_pubkey) : 0;
  auto message_nonce__ = message_nonce ? _fbb.CreateVector<uint8_t>(*message_nonce) : 0;
  auto ciphertext__ = ciphertext ? _fbb.CreateVector<uint8_t>(*ciphertext) : 0;
  return teo::CreateDataAccessFetch(
      _fbb,
      accessor_pubkey__,
      message_nonce__,
      ciphertext__);
}

inline const teo::DataAccessFetch *GetDataAccessFetch(const void *buf) {
  return flatbuffers::GetRoot<teo::DataAccessFetch>(buf);
}

inline const teo::DataAccessFetch *GetSizePrefixedDataAccessFetch(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::DataAccessFetch>(buf);
}

inline bool VerifyDataAccessFetchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::DataAccessFetch>(nullptr);
}

inline bool VerifySizePrefixedDataAccessFetchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::DataAccessFetch>(nullptr);
}

inline void FinishDataAccessFetchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataAccessFetch> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataAccessFetchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataAccessFetch> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_DATAACCESSFETCH_TEO_H_
