// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UTILFETCHSTOREPUBKEY_TEO_H_
#define FLATBUFFERS_GENERATED_UTILFETCHSTOREPUBKEY_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct UtilFetchStorePubkey;
struct UtilFetchStorePubkeyBuilder;

struct UtilFetchStorePubkey FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UtilFetchStorePubkeyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PUBKEY = 4
  };
  const flatbuffers::Vector<uint8_t> *pubkey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PUBKEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PUBKEY) &&
           verifier.VerifyVector(pubkey()) &&
           verifier.EndTable();
  }
};

struct UtilFetchStorePubkeyBuilder {
  typedef UtilFetchStorePubkey Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pubkey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> pubkey) {
    fbb_.AddOffset(UtilFetchStorePubkey::VT_PUBKEY, pubkey);
  }
  explicit UtilFetchStorePubkeyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UtilFetchStorePubkey> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UtilFetchStorePubkey>(end);
    return o;
  }
};

inline flatbuffers::Offset<UtilFetchStorePubkey> CreateUtilFetchStorePubkey(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> pubkey = 0) {
  UtilFetchStorePubkeyBuilder builder_(_fbb);
  builder_.add_pubkey(pubkey);
  return builder_.Finish();
}

inline flatbuffers::Offset<UtilFetchStorePubkey> CreateUtilFetchStorePubkeyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *pubkey = nullptr) {
  auto pubkey__ = pubkey ? _fbb.CreateVector<uint8_t>(*pubkey) : 0;
  return teo::CreateUtilFetchStorePubkey(
      _fbb,
      pubkey__);
}

inline const teo::UtilFetchStorePubkey *GetUtilFetchStorePubkey(const void *buf) {
  return flatbuffers::GetRoot<teo::UtilFetchStorePubkey>(buf);
}

inline const teo::UtilFetchStorePubkey *GetSizePrefixedUtilFetchStorePubkey(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::UtilFetchStorePubkey>(buf);
}

inline bool VerifyUtilFetchStorePubkeyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::UtilFetchStorePubkey>(nullptr);
}

inline bool VerifySizePrefixedUtilFetchStorePubkeyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::UtilFetchStorePubkey>(nullptr);
}

inline void FinishUtilFetchStorePubkeyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::UtilFetchStorePubkey> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUtilFetchStorePubkeyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::UtilFetchStorePubkey> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_UTILFETCHSTOREPUBKEY_TEO_H_
