// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INITIALIZATIONADMINREPLY_TEO_H_
#define FLATBUFFERS_GENERATED_INITIALIZATIONADMINREPLY_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct InitializationAdminReply;
struct InitializationAdminReplyBuilder;

struct InitializationAdminReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InitializationAdminReplyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG_NONCE = 4,
    VT_CIPHERTEXT = 6
  };
  const flatbuffers::Vector<uint8_t> *msg_nonce() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MSG_NONCE);
  }
  const flatbuffers::Vector<uint8_t> *ciphertext() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CIPHERTEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MSG_NONCE) &&
           verifier.VerifyVector(msg_nonce()) &&
           VerifyOffset(verifier, VT_CIPHERTEXT) &&
           verifier.VerifyVector(ciphertext()) &&
           verifier.EndTable();
  }
};

struct InitializationAdminReplyBuilder {
  typedef InitializationAdminReply Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg_nonce(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> msg_nonce) {
    fbb_.AddOffset(InitializationAdminReply::VT_MSG_NONCE, msg_nonce);
  }
  void add_ciphertext(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext) {
    fbb_.AddOffset(InitializationAdminReply::VT_CIPHERTEXT, ciphertext);
  }
  explicit InitializationAdminReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<InitializationAdminReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InitializationAdminReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<InitializationAdminReply> CreateInitializationAdminReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> msg_nonce = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext = 0) {
  InitializationAdminReplyBuilder builder_(_fbb);
  builder_.add_ciphertext(ciphertext);
  builder_.add_msg_nonce(msg_nonce);
  return builder_.Finish();
}

inline flatbuffers::Offset<InitializationAdminReply> CreateInitializationAdminReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *msg_nonce = nullptr,
    const std::vector<uint8_t> *ciphertext = nullptr) {
  auto msg_nonce__ = msg_nonce ? _fbb.CreateVector<uint8_t>(*msg_nonce) : 0;
  auto ciphertext__ = ciphertext ? _fbb.CreateVector<uint8_t>(*ciphertext) : 0;
  return teo::CreateInitializationAdminReply(
      _fbb,
      msg_nonce__,
      ciphertext__);
}

inline const teo::InitializationAdminReply *GetInitializationAdminReply(const void *buf) {
  return flatbuffers::GetRoot<teo::InitializationAdminReply>(buf);
}

inline const teo::InitializationAdminReply *GetSizePrefixedInitializationAdminReply(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::InitializationAdminReply>(buf);
}

inline bool VerifyInitializationAdminReplyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::InitializationAdminReply>(nullptr);
}

inline bool VerifySizePrefixedInitializationAdminReplyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::InitializationAdminReply>(nullptr);
}

inline void FinishInitializationAdminReplyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::InitializationAdminReply> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInitializationAdminReplyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::InitializationAdminReply> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_INITIALIZATIONADMINREPLY_TEO_H_
