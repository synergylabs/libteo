// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UTILFETCHIPRESPONSE_TEO_H_
#define FLATBUFFERS_GENERATED_UTILFETCHIPRESPONSE_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct UtilFetchIpResponse;
struct UtilFetchIpResponseBuilder;

struct UtilFetchIpResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UtilFetchIpResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IP = 4,
    VT_PORT = 6
  };
  const flatbuffers::String *ip() const {
    return GetPointer<const flatbuffers::String *>(VT_IP);
  }
  int16_t port() const {
    return GetField<int16_t>(VT_PORT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyField<int16_t>(verifier, VT_PORT) &&
           verifier.EndTable();
  }
};

struct UtilFetchIpResponseBuilder {
  typedef UtilFetchIpResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ip(flatbuffers::Offset<flatbuffers::String> ip) {
    fbb_.AddOffset(UtilFetchIpResponse::VT_IP, ip);
  }
  void add_port(int16_t port) {
    fbb_.AddElement<int16_t>(UtilFetchIpResponse::VT_PORT, port, 0);
  }
  explicit UtilFetchIpResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UtilFetchIpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UtilFetchIpResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<UtilFetchIpResponse> CreateUtilFetchIpResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> ip = 0,
    int16_t port = 0) {
  UtilFetchIpResponseBuilder builder_(_fbb);
  builder_.add_ip(ip);
  builder_.add_port(port);
  return builder_.Finish();
}

inline flatbuffers::Offset<UtilFetchIpResponse> CreateUtilFetchIpResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *ip = nullptr,
    int16_t port = 0) {
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  return teo::CreateUtilFetchIpResponse(
      _fbb,
      ip__,
      port);
}

inline const teo::UtilFetchIpResponse *GetUtilFetchIpResponse(const void *buf) {
  return flatbuffers::GetRoot<teo::UtilFetchIpResponse>(buf);
}

inline const teo::UtilFetchIpResponse *GetSizePrefixedUtilFetchIpResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::UtilFetchIpResponse>(buf);
}

inline bool VerifyUtilFetchIpResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::UtilFetchIpResponse>(nullptr);
}

inline bool VerifySizePrefixedUtilFetchIpResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::UtilFetchIpResponse>(nullptr);
}

inline void FinishUtilFetchIpResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::UtilFetchIpResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUtilFetchIpResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::UtilFetchIpResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_UTILFETCHIPRESPONSE_TEO_H_
