// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACQUIREPREAUTHTOKENRESPONSE_TEO_H_
#define FLATBUFFERS_GENERATED_ACQUIREPREAUTHTOKENRESPONSE_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct AcquirePreAuthTokenResponse;
struct AcquirePreAuthTokenResponseBuilder;

struct AcquirePreAuthTokenResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AcquirePreAuthTokenResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BOX_NONCE = 4,
    VT_CIPHERTEXT = 6
  };
  const flatbuffers::Vector<uint8_t> *box_nonce() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BOX_NONCE);
  }
  const flatbuffers::Vector<uint8_t> *ciphertext() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CIPHERTEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BOX_NONCE) &&
           verifier.VerifyVector(box_nonce()) &&
           VerifyOffset(verifier, VT_CIPHERTEXT) &&
           verifier.VerifyVector(ciphertext()) &&
           verifier.EndTable();
  }
};

struct AcquirePreAuthTokenResponseBuilder {
  typedef AcquirePreAuthTokenResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_box_nonce(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> box_nonce) {
    fbb_.AddOffset(AcquirePreAuthTokenResponse::VT_BOX_NONCE, box_nonce);
  }
  void add_ciphertext(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext) {
    fbb_.AddOffset(AcquirePreAuthTokenResponse::VT_CIPHERTEXT, ciphertext);
  }
  explicit AcquirePreAuthTokenResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AcquirePreAuthTokenResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AcquirePreAuthTokenResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<AcquirePreAuthTokenResponse> CreateAcquirePreAuthTokenResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> box_nonce = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext = 0) {
  AcquirePreAuthTokenResponseBuilder builder_(_fbb);
  builder_.add_ciphertext(ciphertext);
  builder_.add_box_nonce(box_nonce);
  return builder_.Finish();
}

inline flatbuffers::Offset<AcquirePreAuthTokenResponse> CreateAcquirePreAuthTokenResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *box_nonce = nullptr,
    const std::vector<uint8_t> *ciphertext = nullptr) {
  auto box_nonce__ = box_nonce ? _fbb.CreateVector<uint8_t>(*box_nonce) : 0;
  auto ciphertext__ = ciphertext ? _fbb.CreateVector<uint8_t>(*ciphertext) : 0;
  return teo::CreateAcquirePreAuthTokenResponse(
      _fbb,
      box_nonce__,
      ciphertext__);
}

inline const teo::AcquirePreAuthTokenResponse *GetAcquirePreAuthTokenResponse(const void *buf) {
  return flatbuffers::GetRoot<teo::AcquirePreAuthTokenResponse>(buf);
}

inline const teo::AcquirePreAuthTokenResponse *GetSizePrefixedAcquirePreAuthTokenResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::AcquirePreAuthTokenResponse>(buf);
}

inline bool VerifyAcquirePreAuthTokenResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::AcquirePreAuthTokenResponse>(nullptr);
}

inline bool VerifySizePrefixedAcquirePreAuthTokenResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::AcquirePreAuthTokenResponse>(nullptr);
}

inline void FinishAcquirePreAuthTokenResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::AcquirePreAuthTokenResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAcquirePreAuthTokenResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::AcquirePreAuthTokenResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_ACQUIREPREAUTHTOKENRESPONSE_TEO_H_
