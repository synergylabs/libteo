// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLAIMDEVICEDISCOVERY_TEO_H_
#define FLATBUFFERS_GENERATED_CLAIMDEVICEDISCOVERY_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct ClaimDeviceDiscovery;
struct ClaimDeviceDiscoveryBuilder;

struct ClaimDeviceDiscovery FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClaimDeviceDiscoveryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_PUBKEY = 4
  };
  const flatbuffers::Vector<uint8_t> *user_pubkey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_USER_PUBKEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_PUBKEY) &&
           verifier.VerifyVector(user_pubkey()) &&
           verifier.EndTable();
  }
};

struct ClaimDeviceDiscoveryBuilder {
  typedef ClaimDeviceDiscovery Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_pubkey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> user_pubkey) {
    fbb_.AddOffset(ClaimDeviceDiscovery::VT_USER_PUBKEY, user_pubkey);
  }
  explicit ClaimDeviceDiscoveryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClaimDeviceDiscovery> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClaimDeviceDiscovery>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClaimDeviceDiscovery> CreateClaimDeviceDiscovery(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> user_pubkey = 0) {
  ClaimDeviceDiscoveryBuilder builder_(_fbb);
  builder_.add_user_pubkey(user_pubkey);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClaimDeviceDiscovery> CreateClaimDeviceDiscoveryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *user_pubkey = nullptr) {
  auto user_pubkey__ = user_pubkey ? _fbb.CreateVector<uint8_t>(*user_pubkey) : 0;
  return teo::CreateClaimDeviceDiscovery(
      _fbb,
      user_pubkey__);
}

inline const teo::ClaimDeviceDiscovery *GetClaimDeviceDiscovery(const void *buf) {
  return flatbuffers::GetRoot<teo::ClaimDeviceDiscovery>(buf);
}

inline const teo::ClaimDeviceDiscovery *GetSizePrefixedClaimDeviceDiscovery(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::ClaimDeviceDiscovery>(buf);
}

inline bool VerifyClaimDeviceDiscoveryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::ClaimDeviceDiscovery>(nullptr);
}

inline bool VerifySizePrefixedClaimDeviceDiscoveryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::ClaimDeviceDiscovery>(nullptr);
}

inline void FinishClaimDeviceDiscoveryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::ClaimDeviceDiscovery> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClaimDeviceDiscoveryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::ClaimDeviceDiscovery> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_CLAIMDEVICEDISCOVERY_TEO_H_
