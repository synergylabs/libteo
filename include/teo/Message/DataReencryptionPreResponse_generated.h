// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATAREENCRYPTIONPRERESPONSE_TEO_H_
#define FLATBUFFERS_GENERATED_DATAREENCRYPTIONPRERESPONSE_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct DataReencryptionPreResponse;
struct DataReencryptionPreResponseBuilder;

struct DataReencryptionPreResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataReencryptionPreResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CIPHERTEXT = 4
  };
  const flatbuffers::Vector<uint8_t> *ciphertext() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CIPHERTEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CIPHERTEXT) &&
           verifier.VerifyVector(ciphertext()) &&
           verifier.EndTable();
  }
};

struct DataReencryptionPreResponseBuilder {
  typedef DataReencryptionPreResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ciphertext(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext) {
    fbb_.AddOffset(DataReencryptionPreResponse::VT_CIPHERTEXT, ciphertext);
  }
  explicit DataReencryptionPreResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DataReencryptionPreResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataReencryptionPreResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<DataReencryptionPreResponse> CreateDataReencryptionPreResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext = 0) {
  DataReencryptionPreResponseBuilder builder_(_fbb);
  builder_.add_ciphertext(ciphertext);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataReencryptionPreResponse> CreateDataReencryptionPreResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *ciphertext = nullptr) {
  auto ciphertext__ = ciphertext ? _fbb.CreateVector<uint8_t>(*ciphertext) : 0;
  return teo::CreateDataReencryptionPreResponse(
      _fbb,
      ciphertext__);
}

inline const teo::DataReencryptionPreResponse *GetDataReencryptionPreResponse(const void *buf) {
  return flatbuffers::GetRoot<teo::DataReencryptionPreResponse>(buf);
}

inline const teo::DataReencryptionPreResponse *GetSizePrefixedDataReencryptionPreResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::DataReencryptionPreResponse>(buf);
}

inline bool VerifyDataReencryptionPreResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::DataReencryptionPreResponse>(nullptr);
}

inline bool VerifySizePrefixedDataReencryptionPreResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::DataReencryptionPreResponse>(nullptr);
}

inline void FinishDataReencryptionPreResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataReencryptionPreResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataReencryptionPreResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::DataReencryptionPreResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_DATAREENCRYPTIONPRERESPONSE_TEO_H_
