// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLAIMDEVICEDISCOVERYRESPONSE_TEO_H_
#define FLATBUFFERS_GENERATED_CLAIMDEVICEDISCOVERYRESPONSE_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct ClaimDeviceDiscoveryResponse;
struct ClaimDeviceDiscoveryResponseBuilder;

struct ClaimDeviceDiscoveryResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClaimDeviceDiscoveryResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEVICE_PUBKEY = 4,
    VT_VALID_DEVICE_PROOF = 6
  };
  const flatbuffers::Vector<uint8_t> *device_pubkey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DEVICE_PUBKEY);
  }
  const flatbuffers::Vector<uint8_t> *valid_device_proof() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALID_DEVICE_PROOF);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DEVICE_PUBKEY) &&
           verifier.VerifyVector(device_pubkey()) &&
           VerifyOffset(verifier, VT_VALID_DEVICE_PROOF) &&
           verifier.VerifyVector(valid_device_proof()) &&
           verifier.EndTable();
  }
};

struct ClaimDeviceDiscoveryResponseBuilder {
  typedef ClaimDeviceDiscoveryResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_device_pubkey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> device_pubkey) {
    fbb_.AddOffset(ClaimDeviceDiscoveryResponse::VT_DEVICE_PUBKEY, device_pubkey);
  }
  void add_valid_device_proof(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> valid_device_proof) {
    fbb_.AddOffset(ClaimDeviceDiscoveryResponse::VT_VALID_DEVICE_PROOF, valid_device_proof);
  }
  explicit ClaimDeviceDiscoveryResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClaimDeviceDiscoveryResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClaimDeviceDiscoveryResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClaimDeviceDiscoveryResponse> CreateClaimDeviceDiscoveryResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> device_pubkey = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> valid_device_proof = 0) {
  ClaimDeviceDiscoveryResponseBuilder builder_(_fbb);
  builder_.add_valid_device_proof(valid_device_proof);
  builder_.add_device_pubkey(device_pubkey);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClaimDeviceDiscoveryResponse> CreateClaimDeviceDiscoveryResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *device_pubkey = nullptr,
    const std::vector<uint8_t> *valid_device_proof = nullptr) {
  auto device_pubkey__ = device_pubkey ? _fbb.CreateVector<uint8_t>(*device_pubkey) : 0;
  auto valid_device_proof__ = valid_device_proof ? _fbb.CreateVector<uint8_t>(*valid_device_proof) : 0;
  return teo::CreateClaimDeviceDiscoveryResponse(
      _fbb,
      device_pubkey__,
      valid_device_proof__);
}

inline const teo::ClaimDeviceDiscoveryResponse *GetClaimDeviceDiscoveryResponse(const void *buf) {
  return flatbuffers::GetRoot<teo::ClaimDeviceDiscoveryResponse>(buf);
}

inline const teo::ClaimDeviceDiscoveryResponse *GetSizePrefixedClaimDeviceDiscoveryResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::ClaimDeviceDiscoveryResponse>(buf);
}

inline bool VerifyClaimDeviceDiscoveryResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::ClaimDeviceDiscoveryResponse>(nullptr);
}

inline bool VerifySizePrefixedClaimDeviceDiscoveryResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::ClaimDeviceDiscoveryResponse>(nullptr);
}

inline void FinishClaimDeviceDiscoveryResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::ClaimDeviceDiscoveryResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClaimDeviceDiscoveryResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::ClaimDeviceDiscoveryResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_CLAIMDEVICEDISCOVERYRESPONSE_TEO_H_
