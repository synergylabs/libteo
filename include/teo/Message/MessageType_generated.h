// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGETYPE_TEO_H_
#define FLATBUFFERS_GENERATED_MESSAGETYPE_TEO_H_

#include "flatbuffers/flatbuffers.h"

namespace teo {

struct MessageTypeMsg;
struct MessageTypeMsgBuilder;

enum MessageType : uint8_t {
  MessageType_NO_TYPE = 0,
  MessageType_INITIALIZATION_REQUEST = 1,
  MessageType_INITIALIZATION_DEVICE_INFO = 2,
  MessageType_INITIALIZATION_ADMIN_REPLY = 3,
  MessageType_ACQUIRE_PRE_AUTH_TOKEN_REQUEST = 4,
  MessageType_ACQUIRE_PRE_AUTH_TOKEN_RESPONSE = 5,
  MessageType_CLAIM_DEVICE_DISCOVERY = 6,
  MessageType_CLAIM_DEVICE_DISCOVERY_RESPONSE = 7,
  MessageType_CLAIM_DEVICE_REQUEST = 8,
  MessageType_CLAIM_DEVICE_RESPONSE = 9,
  MessageType_DATA_STORE_SIEVE_CRED_REQUEST = 10,
  MessageType_DATA_STORE_SIEVE_CRED_RESPONSE = 11,
  MessageType_DATA_STORE_UPLOAD = 12,
  MessageType_DATA_STORE_UPLOAD_ACK = 13,
  MessageType_DATA_STORE_UPLOAD_NOTIFICATION = 14,
  MessageType_DATA_STORE_DOWNLOAD_REQUEST = 15,
  MessageType_DATA_STORE_DOWNLOAD_RESPONSE_1 = 16,
  MessageType_DATA_STORE_DOWNLOAD_RESPONSE_1_ACK = 17,
  MessageType_DATA_ACCESS_FETCH = 18,
  MessageType_DATA_ACCESS_RESPONSE = 19,
  MessageType_DATA_REENCRYPTION_PRE_REQUEST = 20,
  MessageType_DATA_REENCRYPTION_PRE_RESPONSE = 21,
  MessageType_DATA_REENCRYPTION_REQUEST = 22,
  MessageType_DATA_REENCRYPTION_RESPONSE = 23,
  MessageType_UTIL_FETCH_STORE_PUBKEY = 24,
  MessageType_UTIL_REGISTER_IP = 25,
  MessageType_UTIL_FETCH_IP_REQUEST = 26,
  MessageType_UTIL_FETCH_IP_RESPONSE = 27,
  MessageType_UTIL_REAL_TIME_ACCESS_REQUEST = 28,
  MessageType_UTIL_REAL_TIME_ACCESS_RESPONSE = 29,
  MessageType_UTIL_RELEASE_DEVICE = 30,
  MessageType_UTIL_REMOVE_REAL_TIME_ACCESS = 31,
  MessageType_UTIL_HEARTBEAT = 32,
  MessageType_MIN = MessageType_NO_TYPE,
  MessageType_MAX = MessageType_UTIL_HEARTBEAT
};

inline const MessageType (&EnumValuesMessageType())[33] {
  static const MessageType values[] = {
    MessageType_NO_TYPE,
    MessageType_INITIALIZATION_REQUEST,
    MessageType_INITIALIZATION_DEVICE_INFO,
    MessageType_INITIALIZATION_ADMIN_REPLY,
    MessageType_ACQUIRE_PRE_AUTH_TOKEN_REQUEST,
    MessageType_ACQUIRE_PRE_AUTH_TOKEN_RESPONSE,
    MessageType_CLAIM_DEVICE_DISCOVERY,
    MessageType_CLAIM_DEVICE_DISCOVERY_RESPONSE,
    MessageType_CLAIM_DEVICE_REQUEST,
    MessageType_CLAIM_DEVICE_RESPONSE,
    MessageType_DATA_STORE_SIEVE_CRED_REQUEST,
    MessageType_DATA_STORE_SIEVE_CRED_RESPONSE,
    MessageType_DATA_STORE_UPLOAD,
    MessageType_DATA_STORE_UPLOAD_ACK,
    MessageType_DATA_STORE_UPLOAD_NOTIFICATION,
    MessageType_DATA_STORE_DOWNLOAD_REQUEST,
    MessageType_DATA_STORE_DOWNLOAD_RESPONSE_1,
    MessageType_DATA_STORE_DOWNLOAD_RESPONSE_1_ACK,
    MessageType_DATA_ACCESS_FETCH,
    MessageType_DATA_ACCESS_RESPONSE,
    MessageType_DATA_REENCRYPTION_PRE_REQUEST,
    MessageType_DATA_REENCRYPTION_PRE_RESPONSE,
    MessageType_DATA_REENCRYPTION_REQUEST,
    MessageType_DATA_REENCRYPTION_RESPONSE,
    MessageType_UTIL_FETCH_STORE_PUBKEY,
    MessageType_UTIL_REGISTER_IP,
    MessageType_UTIL_FETCH_IP_REQUEST,
    MessageType_UTIL_FETCH_IP_RESPONSE,
    MessageType_UTIL_REAL_TIME_ACCESS_REQUEST,
    MessageType_UTIL_REAL_TIME_ACCESS_RESPONSE,
    MessageType_UTIL_RELEASE_DEVICE,
    MessageType_UTIL_REMOVE_REAL_TIME_ACCESS,
    MessageType_UTIL_HEARTBEAT
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[34] = {
    "NO_TYPE",
    "INITIALIZATION_REQUEST",
    "INITIALIZATION_DEVICE_INFO",
    "INITIALIZATION_ADMIN_REPLY",
    "ACQUIRE_PRE_AUTH_TOKEN_REQUEST",
    "ACQUIRE_PRE_AUTH_TOKEN_RESPONSE",
    "CLAIM_DEVICE_DISCOVERY",
    "CLAIM_DEVICE_DISCOVERY_RESPONSE",
    "CLAIM_DEVICE_REQUEST",
    "CLAIM_DEVICE_RESPONSE",
    "DATA_STORE_SIEVE_CRED_REQUEST",
    "DATA_STORE_SIEVE_CRED_RESPONSE",
    "DATA_STORE_UPLOAD",
    "DATA_STORE_UPLOAD_ACK",
    "DATA_STORE_UPLOAD_NOTIFICATION",
    "DATA_STORE_DOWNLOAD_REQUEST",
    "DATA_STORE_DOWNLOAD_RESPONSE_1",
    "DATA_STORE_DOWNLOAD_RESPONSE_1_ACK",
    "DATA_ACCESS_FETCH",
    "DATA_ACCESS_RESPONSE",
    "DATA_REENCRYPTION_PRE_REQUEST",
    "DATA_REENCRYPTION_PRE_RESPONSE",
    "DATA_REENCRYPTION_REQUEST",
    "DATA_REENCRYPTION_RESPONSE",
    "UTIL_FETCH_STORE_PUBKEY",
    "UTIL_REGISTER_IP",
    "UTIL_FETCH_IP_REQUEST",
    "UTIL_FETCH_IP_RESPONSE",
    "UTIL_REAL_TIME_ACCESS_REQUEST",
    "UTIL_REAL_TIME_ACCESS_RESPONSE",
    "UTIL_RELEASE_DEVICE",
    "UTIL_REMOVE_REAL_TIME_ACCESS",
    "UTIL_HEARTBEAT",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (flatbuffers::IsOutRange(e, MessageType_NO_TYPE, MessageType_UTIL_HEARTBEAT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageType()[index];
}

struct MessageTypeMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageTypeMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4
  };
  teo::MessageType type() const {
    return static_cast<teo::MessageType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct MessageTypeMsgBuilder {
  typedef MessageTypeMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(teo::MessageType type) {
    fbb_.AddElement<uint8_t>(MessageTypeMsg::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  explicit MessageTypeMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MessageTypeMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MessageTypeMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<MessageTypeMsg> CreateMessageTypeMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    teo::MessageType type = teo::MessageType_NO_TYPE) {
  MessageTypeMsgBuilder builder_(_fbb);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const teo::MessageTypeMsg *GetMessageTypeMsg(const void *buf) {
  return flatbuffers::GetRoot<teo::MessageTypeMsg>(buf);
}

inline const teo::MessageTypeMsg *GetSizePrefixedMessageTypeMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<teo::MessageTypeMsg>(buf);
}

inline bool VerifyMessageTypeMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<teo::MessageTypeMsg>(nullptr);
}

inline bool VerifySizePrefixedMessageTypeMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<teo::MessageTypeMsg>(nullptr);
}

inline void FinishMessageTypeMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::MessageTypeMsg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageTypeMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<teo::MessageTypeMsg> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace teo

#endif  // FLATBUFFERS_GENERATED_MESSAGETYPE_TEO_H_
